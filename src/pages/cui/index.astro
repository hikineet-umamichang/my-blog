---
import PageLayout from "@/layouts/Base.astro";

const meta = {
	description: "I'm a starter theme for Astro.build",
	title: "CUI",
};
---

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@500&display=swap"
	rel="stylesheet"
/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/xterm@5.3.0/css/xterm.min.css" />

<PageLayout meta={meta}>
	<div id="app"></div>
	<label for="font_size_select" class="">font size</label>
	<select name="font size" id="font_size_select" class="m-2">
		<option value="" selected></option>
		<option value="10">10</option>
		<option value="12">12</option>
		<option value="14">14</option>
		<option value="16">16</option>
		<option value="18">18 </option>
		<option value="20">20 </option>
		<option value="22">22 </option>
	</select>
</PageLayout>
<script>
	import { my_eval } from "../cui/modules/my_eval";

	import { Terminal } from "xterm";
	import { FitAddon } from "xterm-addon-fit";
	import { WebLinksAddon } from "xterm-addon-web-links";
	import { Unicode11Addon } from "xterm-addon-unicode11";
	import { ImageAddon } from "xterm-addon-image";
	import { Readline } from "xterm-readline";

	const term = new Terminal({
		fontSize: 16,
		cursorBlink: true,
		cursorStyle: "underline",
		allowProposedApi: true,
		// fontFamily: "Source Code Pro",
	});

	const fitaddon = new FitAddon();
	const webLinkAddon = new WebLinksAddon();
	const unicode11Addon = new Unicode11Addon();
	const imageAddon = new ImageAddon();
	const rl = new Readline();

	term.open(document.getElementById("app") as HTMLElement);

	[fitaddon, webLinkAddon, unicode11Addon, imageAddon, rl].map((e) => term.loadAddon(e));

	term.focus();
	fitaddon.activate(term);
	webLinkAddon.activate(term);
	unicode11Addon.activate(term);
	imageAddon.activate(term);

	term.unicode.activeVersion = "11";

	fitaddon.fit();
	window.addEventListener("resize", () => fitaddon.fit());

	const selectedFontSize = document.getElementById("font_size_select");

	selectedFontSize?.addEventListener("change", (e) => {
		const selectednum = parseInt((e.target as HTMLSelectElement).value);
		console.log(selectednum);
		term.options.fontSize = selectednum;
		term.refresh(0, term.rows - 1);
		fitaddon.fit();
	});

	async function processLine(text: string) {
		const res = await my_eval(text, term.cols, term.rows);
		// console.log(res);
		if (typeof res == "string") {
			rl.println(res);
			readLine();
		} else {
			let count = 0;
			const intervalId = setInterval(() => {
				rl.print(res[count]);
				count++;
				if (count >= res.length) {
					clearInterval(intervalId);
					rl.println("");
					readLine();
				}
			}, 50);
		}
	}

	function readLine() {
		rl.read("\n$ ").then(processLine);
	}

	rl.print("now loading...");
	let count = 0;
	const intervalId = setInterval(() => {
		if (count % 4 == 0) {
			rl.print(`\\`);
		} else if (count % 4 == 1) {
			rl.print(`|`);
		} else if (count % 4 == 2) {
			rl.print(`/`);
		} else if (count % 4 == 3) {
			rl.print(`-`);
		}
		rl.print("\b");

		count++;
		if (count === 10) {
			clearInterval(intervalId);
			rl.print("\x1b[2J");
			rl.print("\x1b[1G");
			rl.println('To see what commands are available, run "help" command.');
			readLine();
		}
	}, 300); // 500ミリ秒 = 0.5秒
</script>
<style>
	#app {
		height: 70vh;
		width: 100%;
		/* border: 5px double #333333;
		box-sizing: border-box; */
	}

	.xterm .xterm-viewport {
		background-color: transparent;
		overflow-y: scroll;
		cursor: default;
		right: 0;
		left: 0;
		top: 0;
		bottom: 0;
		scrollbar-width: var(--highlight) var(--dark);
		scrollbar-width: thin;
	}
</style>
